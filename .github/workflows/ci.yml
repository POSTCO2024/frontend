name: FE CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package-type: [apps, packages]

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Get package list
        id: package-list
        run: |
          echo "packages=$(ls ${{ matrix.package-type }} | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

      - name: Build and Test
        run: |
          for package in $(echo ${{ steps.package-list.outputs.packages }} | jq -r '.[]'); do
            echo "Processing $package"
            cd ${{ matrix.package-type }}/$package
            pnpm run build
            pnpm test
            cd ../..
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package-type }}-builds
          path: ${{ matrix.package-type }}/**/dist

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-and-test
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Set DATE environment variable
        run: echo "DATE=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Upload to artifact S3
        run: |
          aws s3 sync artifacts s3://${{ secrets.ARTIFACT_BUCKET }}/${{ env.DATE }} --delete

      - name: Upload apps to deployment S3
        run: |
          for app in apps/*/dist; do
            app_name=$(basename $(dirname $app))
            aws s3 sync $app s3://dev-${{ secrets.S3_BUCKET_NAME_PREFIX }}-${app_name}-app --delete
          done

      - name: Trigger CodePipeline
        run: |
          aws codepipeline start-pipeline-execution --name frontend-pipeline-dev

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"